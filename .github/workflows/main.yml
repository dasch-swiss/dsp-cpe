name: CI
env:
  node-version: 16.15.0

on:
  push:
  release:
    types: [published]

jobs:
  find-ignored-tests:
    name: Find ignored tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
      - name: Run the script
        run: ./find-ignored-tests.sh

  unit-tests:
    name: Run unit tests
    needs: [find-ignored-tests]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
      - name: Set up Node.js ${{ env.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.node-version }}
      - name: Install dependencies
        run: npm install
      - name: Run the tests
        run: npm run test-ci
        env:
          TZ: Europe/Zurich

  build:
    name: Build the app
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
      - name: Set up Node.js ${{ env.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.node-version }}
      - name: Install dependencies
        run: npm install
      - name: Build in prod mode
        run: npm run build-prod

  e2e-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
      - name: Set up Node.js ${{ env.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.node-version }}
      - name: Install dependencies
        run: npm install
      - name: Start JSON server
        run: npx json-server --routes db-routes.json db.json &
      - name: Run e2e tests
        uses: cypress-io/github-action@v5
        with:
          browser: chrome
          build: npm run build
          start: npm start
          wait-on: "http://localhost:4200"
      - name: Upload Cypress screenshots (in case of failed tests)
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots
      - name: Upload Cypress video
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: cypress-videos
          path: cypress/videos

  # publish only on release
  publish-image:
    name: Build and Publish Image to Dockerhub
    needs: [ build, unit-tests, e2e-tests ]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && startsWith(github.ref, 'refs/tags')
    steps:
      - name: checkout source
        uses: actions/checkout@v3
        with:
          fetch-depth: 50
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64, linux/arm64
          push: true
          tags: daschswiss/dsp-cpe:latest, daschswiss/dsp-cpe:${{ steps.get_version.outputs.VERSION }}
  release-please:
    name: Prepare next release
    runs-on: ubuntu-latest
    # Automate releases with Conventional Commit Messages as Pull Requests are merged into "main" branch
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Get release please action
        uses: GoogleCloudPlatform/release-please-action@v3
        with:
          token: ${{ secrets.GH_TOKEN }}
          release-type: node
          package-name: DSP-CPE
          changelog-types: '[
            {"type": "feat", "section": "Enhancements", "hidden": false },
            {"type": "fix", "section": "Bug Fixes", "hidden": false },
            {"type": "chore", "section": "Maintenance", "hidden": false },
            {"type": "refactor", "section": "Maintenance", "hidden": false },
            {"type": "style", "section": "Maintenance", "hidden": false },
            {"type": "docs", "section": "Documentation", "hidden": false }
            ]'
  notification:
    name: Google chat notification about release and published version
    needs: [publish]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && startsWith(github.ref, 'refs/tags')
    steps:
      - name: Send notification to google chat room "DSP releases"
        uses: lakto/google-chat-action@main
        with:
          url: ${{ secrets.GOOGLE_CHAT_DSP_RELEASES_WEBHOOK_URL }}
